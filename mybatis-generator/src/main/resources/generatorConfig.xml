<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>

    <!-- 引入配置文件 -->
    <properties resource="config.properties"/>

    <!-- classPathEntry:数据库的JDBC驱动 -->
    <!--<classPathEntry location="${jdbcClassPath}"/>-->

    <context id="DB2Tables" targetRuntime="MyBatis3">

        <!--<plugin type="org.mybatis.generator.plugins.EqualsHashCodePlugin"/>-->
        <!--<plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>-->
        <!--<plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>-->

        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>
        <!-- 当表名或者字段名为 SQL 关键字的时候，可以设置该属性为 true，MBG 会自动给表名或字段名添加 `分隔符` -->
        <property name="autoDelimitKeywords" value="true"/>

        <!-- 这里的使用的**反单引号(`)**就是**分隔符**，**分隔符**可以用于**表名**或者**列名**。 -->
        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <!-- 去除自动生成的注释 -->
        <commentGenerator>
            <property name="suppressDate" value="true"/>
            <property name="suppressAllComments" value="true"/>
        </commentGenerator>

        <jdbcConnection driverClass="${jdbcConnection.driverClass}"
                        connectionURL="${jdbcConnection.connectionURL}"
                        userId="${jdbcConnection.userId}"
                        password="${jdbcConnection.password}">
        </jdbcConnection>

        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- 生成实体类 -->
        <javaModelGenerator targetPackage="${javaModel.targetPackage}"
                            targetProject="${javaModel.targetProject}">
            <property name="enableSubPackages" value="true"/>
            <property name="trimStrings" value="true"/>
            <property name="constructorBased" value="false"/>
            <property name="immutable" value="false"/>
        </javaModelGenerator>

        <!-- 生成mapper.xml文件 -->
        <sqlMapGenerator targetPackage="${sqlMap.targetPackage}"
                         targetProject="${sqlMap.targetProject}">
            <property name="enableSubPackages" value="true"/>
        </sqlMapGenerator>

        <!-- 生成mapper接口 -->
        <!--
        type:
            1，ANNOTATEDMAPPER：会生成使用Mapper接口+Annotation的方式创建（SQL生成在annotation中），不会生成对应的XML；
            2，MIXEDMAPPER：使用混合配置，会生成Mapper接口，并适当添加合适的Annotation，但是XML会生成在XML中；
            3，XMLMAPPER：会生成Mapper接口，接口完全依赖XML；
        -->
        <javaClientGenerator targetPackage="${javaClient.targetPackage}"
                             targetProject="${javaClient.targetProject}"
                             type="XMLMAPPER">
            <property name="enableSubPackages" value="true"/>
        </javaClientGenerator>

        <!-- tableName:用于自动生成代码的数据库表；domainObjectName:对应于数据库表的javaBean类名 -->
        <table tableName="${table.tableName}" domainObjectName="${table.domainName}"
               enableSelectByExample="false"
               enableDeleteByExample="false"
               enableUpdateByExample="false"
               selectByExampleQueryId="false"
               enableCountByExample="false">

            <!-- 生成主键 -->
            <generatedKey column="id" sqlStatement="MySQL" identity="true"/>
            <!-- 忽略列，不生成bean 字段 -->
            <!--<ignoreColumn column="ignore_column"/>-->
            <!-- 指定列的java数据类型 -->
            <!--<columnOverride column="specify_column" jdbcType="VARCHAR"/>-->
        </table>

    </context>

</generatorConfiguration>